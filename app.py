import streamlit as st
import pandas as pd
import plotly.express as px
from PIL import Image

# --- CONFIGURACI√ìN DE LA P√ÅGINA (Debe ser lo primero) ---
st.set_page_config(
    page_title="Inventario Universal del Llano",
    page_icon="üì¶",
    layout="wide",
    initial_sidebar_state="expanded"
)

# --- SIMULACI√ìN DE DATOS (Para replicar el Dashboard) ---

# Crear un DataFrame de inventario
data = {
    'Producto': ['Silla', 'Mueble'],
    'Stock': [80, 25], # Stock total de 105 (80+25)
    'Categor√≠a': ['Sala', 'Cocina'], # 50/50 de las 2 unidades √∫nicas
    'Ventas': [35, 20], # Silla m√°s vendida (35) y Mueble (20)
    'Compras': [0, 10]  # Mueble m√°s comprado (10)
}
df_inventario = pd.DataFrame(data)

# --- NAVEGACI√ìN EN EL SIDEBAR (Men√∫ de Navegaci√≥n) ---
st.sidebar.header("Men√∫ de Navegaci√≥n")
ventana_seleccionada = st.sidebar.radio(
    "Selecciona una ventana:",
    ('Dashboard', 'Registro de Productos', 'Registro de Ventas', 'Registro de Compras')
)

# ----------------------------------------------------
# --- ESTRUCTURA DE LA APLICACI√ìN: DASHBOARD (Ventana Principal) ---
# ----------------------------------------------------

if ventana_seleccionada == 'Dashboard':
    # T√≠tulo Principal
    st.title("üì¶ Control de Inventario - Distribuidora Universal del Llano")
    st.header("üìä Dashboard de Inventario")
    
    # --- 1. INDICADORES CLAVE (KPIs) ---
    st.subheader("Indicadores Clave (KPIs)")
    
    # C√°lculo de los KPIs
    total_productos_unicos = df_inventario['Producto'].nunique()
    total_unidades_stock = df_inventario['Stock'].sum()
    productos_bajo_stock = df_inventario[df_inventario['Stock'] <= 10].shape[0]

    # Mostrar los KPIs en columnas
    col1, col2, col3 = st.columns(3)

    with col1:
        st.metric("Total de Productos √önicos", f"{total_productos_unicos}")

    with col2:
        st.metric("Total de Unidades en Stock", f"{total_unidades_stock}")
        
    with col3:
        st.metric("Productos con Bajo Stock (<=10)", f"{productos_bajo_stock}")

    st.markdown("---") # Separador visual

    # --- 2. VISUALIZACIONES (Gr√°ficos) ---
    st.subheader("Visualizaciones")
    
    # Crear dos columnas para los gr√°ficos de Stock y Categor√≠a
    viz_col1, viz_col2 = st.columns(2)

    # Gr√°fico 1: Niveles de Stock por Producto (Bar Chart)
    with viz_col1:
        st.markdown("##### Niveles de Stock por Producto")
        fig_stock = px.bar(
            df_inventario, 
            x='Producto', 
            y='Stock', 
            text='Stock', 
            title="Stock por Producto",
            color='Producto',
            height=350
        )
        fig_stock.update_traces(textposition='outside')
        fig_stock.update_layout(xaxis_title="", yaxis_title="Stock")
        st.plotly_chart(fig_stock, use_container_width=True)

    # Gr√°fico 2: Distribuci√≥n de Productos por Categor√≠a (Pie Chart)
    with viz_col2:
        st.markdown("##### Distribuci√≥n de Productos por Categor√≠a")
        # Usamos el conteo de filas, que es 1 por cada producto √∫nico.
        df_categoria = df_inventario.groupby('Categor√≠a').size().reset_index(name='Count')
        fig_categoria = px.pie(
            df_categoria, 
            names='Categor√≠a', 
            values='Count', 
            title='Productos por Categor√≠a',
            height=350
        )
        st.plotly_chart(fig_categoria, use_container_width=True)

    st.markdown("---") # Separador visual

    # --- 3. AN√ÅLISIS DE MOVIMIENTOS (Ventas y Compras) ---
    st.subheader("An√°lisis de Movimientos")

    # Crear dos columnas para los gr√°ficos de Ventas y Compras
    mov_col1, mov_col2 = st.columns(2)

    # Gr√°fico 3: Top Productos M√°s Vendidos
    with mov_col1:
        st.markdown("##### Top 5 Productos M√°s Vendidos")
        df_ventas = df_inventario.sort_values(by='Ventas', ascending=False).head(5)
        fig_ventas = px.bar(
            df_ventas, 
            x='Producto', 
            y='Ventas', 
            text='Ventas', 
            title="Top 5 Ventas (Unidades Vendidas)",
            color='Producto',
            height=350
        )
        fig_ventas.update_traces(textposition='outside')
        fig_ventas.update_layout(xaxis_title="", yaxis_title="Unidades Vendidas")
        st.plotly_chart(fig_ventas, use_container_width=True)

    # Gr√°fico 4: Top Productos M√°s Comprados
    with mov_col2:
        st.markdown("##### Top 5 Productos M√°s Comprados")
        df_compras = df_inventario.sort_values(by='Compras', ascending=False).head(5)
        fig_compras = px.bar(
            df_compras, 
            x='Producto', 
            y='Compras', 
            text='Compras', 
            title="Top 5 Compras (Unidades Compradas)",
            color='Producto',
            height=350
        )
        fig_compras.update_traces(textposition='outside')
        fig_compras.update_layout(xaxis_title="", yaxis_title="Unidades Compradas")
        st.plotly_chart(fig_compras, use_container_width=True)

# ----------------------------------------------------
# --- ESTRUCTURA DE LA APLICACI√ìN: OTRAS PESTA√ëAS (Funcionalidad Simulada) ---
# ----------------------------------------------------

elif ventana_seleccionada == 'Registro de Productos':
    st.title("‚ûï Registro de Productos")
    st.info("Aqu√≠ se construir√≠a la interfaz para agregar, editar o eliminar productos del inventario.")
    st.dataframe(df_inventario) # Muestra los datos de ejemplo

elif ventana_seleccionada == 'Registro de Ventas':
    st.title("üí∏ Registro de Ventas")
    st.info("Aqu√≠ se construir√≠a el formulario y la tabla para registrar transacciones de venta.")

elif ventana_seleccionada == 'Registro de Compras':
    st.title("üõí Registro de Compras")
    st.info("Aqu√≠ se construir√≠a el formulario y la tabla para registrar entradas de inventario por compra.")